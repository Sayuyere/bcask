package item

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestDiskKVEncode(t *testing.T) {
	d := &DiskKV{
		KeySize:   3,
		ValueSize: 5,
		Key:       "key",
		Value:     "value",
		Timestamp: 1622547800,
	}

	expected := []byte{
		0x00, 0x00, 0x00, 0x00, 0x60, 0xB6, 0x1D, 0x58, // Timestamp
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // KeySize
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, // ValueSize
		0x6B, 0x65, 0x79, // Key
		0x76, 0x61, 0x6C, 0x75, 0x65, // Value
	}
	result := d.Encode()
	assert.Equal(t, expected, result)
}
func TestDiskKVDecode(t *testing.T) {
	data := []byte{
		0x00, 0x00, 0x00, 0x00, 0x60, 0xB6, 0x1D, 0x58, // Timestamp
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // KeySize
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, // ValueSize
		0x6B, 0x65, 0x79, // Key
		0x76, 0x61, 0x6C, 0x75, 0x65, // Value
	}

	d := &DiskKV{}
	d.Decode(data)

	assert.Equal(t, int64(1622547800), d.Timestamp)
	assert.Equal(t, int64(3), d.KeySize)
	assert.Equal(t, int64(5), d.ValueSize)
	assert.Equal(t, "key", d.Key)
	assert.Equal(t, "value", d.Value)
}
